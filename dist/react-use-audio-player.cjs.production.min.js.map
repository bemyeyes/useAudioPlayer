{"version":3,"file":"react-use-audio-player.cjs.production.min.js","sources":["../src/audioPlayerState.ts","../src/useHowlEventSync.ts","../src/HowlInstanceManager.ts","../src/useAudioPlayer.ts","../src/useGlobalAudioPlayer.ts"],"sourcesContent":["import { Howl } from \"howler\"\n\nexport enum ActionTypes {\n    START_LOAD = \"START_LOAD\",\n    ON_LOAD = \"ON_LOAD\",\n    ON_ERROR = \"ON_ERROR\",\n    ON_PLAY = \"ON_PLAY\",\n    ON_PAUSE = \"ON_PAUSE\",\n    ON_STOP = \"ON_STOP\",\n    ON_END = \"ON_END\",\n    ON_RATE = \"ON_RATE\",\n    ON_MUTE = \"ON_MUTE\",\n    ON_VOLUME = \"ON_VOLUME\",\n    ON_LOOP = \"ON_LOOP\"\n}\n\nexport type StartLoadAction = {\n    type: ActionTypes.START_LOAD\n    linkMediaSession?: boolean\n    howl: Howl\n}\n\n// TODO: the main state reducer should be decoupled from Howler\n// to accomplish this, each action should describe the type of change using an abstraction rather than passing in the howl\nexport type AudioEventAction = {\n    type: Exclude<ActionTypes, ActionTypes.START_LOAD | ActionTypes.ON_ERROR>\n    howl: Howl\n    toggleValue?: boolean\n    debugId?: string\n}\n\nexport type ErrorEvent = {\n    type: ActionTypes.ON_ERROR\n    message: string\n}\n\nexport type Action = StartLoadAction | AudioEventAction | ErrorEvent\n\nexport interface AudioPlayerState {\n    src: string | null\n    looping: boolean\n    isReady: boolean\n    isLoading: boolean\n    paused: boolean\n    stopped: boolean\n    playing: boolean\n    duration: number\n    muted: boolean\n    rate: number\n    volume: number\n    error: string | null\n}\n\nexport function initStateFromHowl(howl?: Howl): AudioPlayerState {\n    if (howl === undefined) {\n        return {\n            src: null,\n            isReady: false,\n            isLoading: false,\n            looping: false,\n            duration: 0,\n            rate: 1,\n            volume: 1,\n            muted: false,\n            playing: false,\n            paused: false,\n            stopped: false,\n            error: null\n        }\n    }\n\n    const position = howl.seek()\n    const playing = howl.playing()\n\n    return {\n        isReady: howl.state() === \"loaded\",\n        isLoading: howl.state() === \"loading\",\n        // @ts-ignore _src exists\n        src: howl._src,\n        looping: howl.loop(),\n        duration: howl.duration(),\n        rate: howl.rate(),\n        volume: howl.volume(),\n        muted: howl.mute(),\n        playing,\n        paused: !playing,\n        stopped: !playing && position === 0,\n        error: null\n    }\n}\n\nexport function reducer(state: AudioPlayerState, action: Action) {\n    switch (action.type) {\n        case ActionTypes.START_LOAD:\n            return {\n                // when called without a Howl object it will return an empty/init state object\n                ...initStateFromHowl(),\n                isLoading: true\n            }\n        case ActionTypes.ON_LOAD:\n            // in React 18 there is a weird race condition where ON_LOAD receives a Howl object that has been unloaded\n            // if we detect this case just return the existing state to wait for another action\n            if (action.howl.state() === \"unloaded\") {\n                return state\n            }\n            return initStateFromHowl(action.howl)\n        case ActionTypes.ON_ERROR:\n            return {\n                // this essentially resets state when called with undefined\n                ...initStateFromHowl(),\n                error: action.message\n            }\n        case ActionTypes.ON_PLAY:\n            return {\n                ...state,\n                playing: true,\n                paused: false,\n                stopped: false\n            }\n        case ActionTypes.ON_PAUSE:\n            return {\n                ...state,\n                playing: false,\n                paused: true\n            }\n        case ActionTypes.ON_STOP: {\n            return {\n                ...state,\n                playing: false,\n                paused: false,\n                stopped: true\n            }\n        }\n        case ActionTypes.ON_END: {\n            return {\n                ...state,\n                playing: state.looping,\n                stopped: !state.looping\n            }\n        }\n        case ActionTypes.ON_MUTE: {\n            return {\n                ...state,\n                muted: action.howl.mute() ?? false\n            }\n        }\n        case ActionTypes.ON_RATE: {\n            return {\n                ...state,\n                rate: action.howl?.rate() ?? 1.0\n            }\n        }\n        case ActionTypes.ON_VOLUME: {\n            return {\n                ...state,\n                volume: action.howl?.volume() ?? 1.0\n            }\n        }\n        case ActionTypes.ON_LOOP: {\n            const { toggleValue = false, howl } = action\n            howl.loop(toggleValue)\n            return {\n                ...state,\n                looping: toggleValue\n            }\n        }\n        default:\n            return state\n    }\n}\n","import {\n    Dispatch,\n    ReducerAction,\n    ReducerState,\n    useCallback,\n    useEffect,\n    useRef\n} from \"react\"\nimport {\n    Action,\n    ActionTypes,\n    AudioPlayerState,\n    reducer\n} from \"./audioPlayerState\"\nimport { HowlInstanceManager } from \"./HowlInstanceManager\"\nimport { HowlErrorCallback } from \"howler\"\n\nexport function useHowlEventSync(\n    howlManager: HowlInstanceManager,\n    [state, dispatch]: [AudioPlayerState, Dispatch<Action>]\n): [ReducerState<typeof reducer>, Dispatch<ReducerAction<typeof reducer>>] {\n    const onLoad = useCallback(() => {\n        const howl = howlManager.getHowl()\n        if (howl === undefined) return\n        dispatch({ type: ActionTypes.ON_LOAD, howl })\n    }, [dispatch, howlManager])\n\n    const onError: HowlErrorCallback = useCallback(\n        (_: number, errorCode: unknown) => {\n            dispatch({\n                type: ActionTypes.ON_ERROR,\n                message: errorCode as string\n            })\n        },\n        [dispatch]\n    )\n\n    const onPlay = useCallback(() => {\n        const howl = howlManager.getHowl()\n        // TODO since this is the sync layer i should really extract the info from the howl here and pass that in with the action payload\n        if (howl === undefined) return\n        dispatch({ type: ActionTypes.ON_PLAY, howl })\n    }, [dispatch, howlManager])\n\n    const onPause = useCallback(() => {\n        const howl = howlManager.getHowl()\n        if (howl === undefined) return\n        dispatch({ type: ActionTypes.ON_PAUSE, howl })\n    }, [dispatch, howlManager])\n\n    const onEnd = useCallback(() => {\n        const howl = howlManager.getHowl()\n        if (howl === undefined) return\n        dispatch({ type: ActionTypes.ON_END, howl })\n    }, [dispatch, howlManager])\n\n    const onStop = useCallback(() => {\n        const howl = howlManager.getHowl()\n        if (howl === undefined) return\n        dispatch({ type: ActionTypes.ON_STOP, howl })\n    }, [dispatch, howlManager])\n\n    const onMute = useCallback(() => {\n        const howl = howlManager.getHowl()\n        if (howl === undefined) return\n        dispatch({ type: ActionTypes.ON_MUTE, howl })\n    }, [dispatch, howlManager])\n\n    const onVolume = useCallback(() => {\n        const howl = howlManager.getHowl()\n        if (howl === undefined) return\n        dispatch({ type: ActionTypes.ON_VOLUME, howl })\n    }, [dispatch, howlManager])\n\n    const onRate = useCallback(() => {\n        const howl = howlManager.getHowl()\n        if (howl === undefined) return\n        dispatch({ type: ActionTypes.ON_RATE, howl })\n    }, [dispatch, howlManager])\n\n    useEffect(() => {\n        return () => {\n            const howl = howlManager.getHowl()\n            // howl?.off(\"load\", onLoad)\n            howl?.off(\"loaderror\", onError)\n            howl?.off(\"playerror\", onError)\n            howl?.off(\"play\", onPlay)\n            howl?.off(\"pause\", onPause)\n            howl?.off(\"end\", onEnd)\n            howl?.off(\"stop\", onStop)\n            howl?.off(\"mute\", onMute)\n            howl?.off(\"volume\", onVolume)\n            howl?.off(\"rate\", onRate)\n        }\n    }, [])\n\n    // using ref bc we don't want identity of dispatch function to change\n    // see talk: https://youtu.be/nUzLlHFVXx0?t=1558\n    const wrappedDispatch = useRef((action: Action) => {\n        if (action.type === ActionTypes.START_LOAD) {\n            const { howl } = action\n            // set up event listening\n            howl.once(\"load\", onLoad)\n            howl.on(\"loaderror\", onError)\n            howl.on(\"playerror\", onError)\n            howl.on(\"play\", onPlay)\n            howl.on(\"pause\", onPause)\n            howl.on(\"end\", onEnd)\n            howl.on(\"stop\", onStop)\n            howl.on(\"mute\", onMute)\n            howl.on(\"volume\", onVolume)\n            howl.on(\"rate\", onRate)\n        }\n\n        dispatch(action)\n    })\n\n    return [state, wrappedDispatch.current]\n}\n","import { Howl, HowlOptions, Howler } from \"howler\"\n\nimport { AudioLoadOptions } from \"./types\"\nimport { Action, ActionTypes } from \"./audioPlayerState\"\n\nexport type AudioActionCallback = (action: Action) => void\n\nexport class HowlInstanceManager {\n    private callbacks: Map<string, AudioActionCallback> = new Map()\n    private howl: Howl | undefined = undefined\n    private options: AudioLoadOptions = {}\n    private subscriptionIndex = 0\n\n    public subscribe(cb: AudioActionCallback): string {\n        const id = (this.subscriptionIndex++).toString()\n        this.callbacks.set(id, cb)\n        return id\n    }\n\n    public unsubscribe(subscriptionId: string) {\n        this.callbacks.delete(subscriptionId)\n    }\n\n    public getHowl() {\n        return this.howl\n    }\n\n    public getHowler() {\n        return Howler\n    }\n\n    public getNumberOfConnections() {\n        return this.callbacks.size\n    }\n\n    public createHowl(options: { src: string } & AudioLoadOptions) {\n        this.destroyHowl()\n\n        this.options = options\n        const {\n            initialVolume,\n            initialRate,\n            initialMute,\n            ...rest\n        } = this.options\n        const newHowl = new Howl({\n            mute: initialMute,\n            volume: initialVolume,\n            rate: initialRate,\n            ...rest\n        } as HowlOptions)\n\n        this.callbacks.forEach(cb =>\n            cb({ type: ActionTypes.START_LOAD, howl: newHowl })\n        )\n        this.howl = newHowl\n        return newHowl\n    }\n\n    public destroyHowl() {\n        if (this.options.onload) {\n            this.howl?.off(\"load\", this.options.onload)\n        }\n\n        if (this.options.onend) {\n            this.howl?.off(\"end\", this.options.onend)\n        }\n\n        if (this.options.onplay) {\n            this.howl?.off(\"play\", this.options.onplay)\n        }\n\n        if (this.options.onpause) {\n            this.howl?.off(\"pause\", this.options.onpause)\n        }\n\n        if (this.options.onstop) {\n            this.howl?.off(\"stop\", this.options.onstop)\n        }\n\n        this.howl?.unload()\n    }\n\n    public broadcast(action: Action) {\n        this.callbacks.forEach(cb => cb(action))\n    }\n}\n\nexport class HowlInstanceManagerSingleton {\n    private static instance: HowlInstanceManager\n\n    public static getInstance() {\n        if (this.instance === undefined) {\n            HowlInstanceManagerSingleton.instance = new HowlInstanceManager()\n        }\n\n        return HowlInstanceManagerSingleton.instance\n    }\n}\n","import {MutableRefObject, useCallback, useReducer, useRef} from \"react\"\nimport {\n    ActionTypes,\n    initStateFromHowl,\n    reducer as audioStateReducer\n} from \"./audioPlayerState\"\nimport { useHowlEventSync } from \"./useHowlEventSync\"\nimport { HowlInstanceManager } from \"./HowlInstanceManager\"\nimport { AudioPlayer, LoadArguments } from \"./types\"\n\nexport const useAudioPlayer = (): AudioPlayer & {\n    cleanup: VoidFunction,\n    howlManager: MutableRefObject<HowlInstanceManager | null>,\n    howlerGlobal: MutableRefObject<HowlerGlobal | null>,\n} => {\n    const howlManager = useRef<HowlInstanceManager | null>(null)\n    const howlerGlobal = useRef<HowlerGlobal | null>(null)\n    function getHowlManager() {\n        if (howlManager.current !== null) {\n            return howlManager.current\n        }\n\n        const manager = new HowlInstanceManager()\n        howlManager.current = manager\n        howlerGlobal.current = manager.getHowler()\n        return manager\n    }\n\n    const [state, dispatch] = useHowlEventSync(\n        getHowlManager(),\n        useReducer(\n            audioStateReducer,\n            getHowlManager().getHowl(),\n            initStateFromHowl\n        )\n    )\n\n    const load = useCallback((...[src, options = {}]: LoadArguments) => {\n        // TODO investigate: if we try to avoid loading the same sound (existing howl & same src in call)\n        // then there are some bugs like in the MultipleSounds demo, the \"play\" button will not switch to \"pause\"\n        const howl = getHowlManager().createHowl({\n            src,\n            ...options\n        })\n\n        dispatch({ type: ActionTypes.START_LOAD, howl })\n    }, [])\n\n    const seek = useCallback((seconds: number) => {\n        const howl = getHowlManager().getHowl()\n        if (howl === undefined) {\n            return\n        }\n\n        howl.seek(seconds)\n    }, [])\n\n    const getPosition = useCallback(() => {\n        const howl = getHowlManager().getHowl()\n        if (howl === undefined) {\n            return 0\n        }\n\n        return howl.seek() ?? 0\n    }, [])\n\n    const play = useCallback(() => {\n        const howl = getHowlManager().getHowl()\n        if (howl === undefined) {\n            return\n        }\n\n        howl.play()\n    }, [])\n\n    const pause = useCallback(() => {\n        const howl = getHowlManager().getHowl()\n        if (howl === undefined) {\n            return\n        }\n\n        howl.pause()\n    }, [])\n\n    const togglePlayPause = useCallback(() => {\n        const howl = getHowlManager().getHowl()\n        if (howl === undefined) {\n            return\n        }\n\n        if (state.playing) {\n            howl.pause()\n        } else {\n            howl.play()\n        }\n    }, [state])\n\n    const stop = useCallback(() => {\n        const howl = getHowlManager().getHowl()\n        if (howl === undefined) {\n            return\n        }\n\n        howl.stop()\n    }, [])\n\n    const fade = useCallback((from: number, to: number, duration: number) => {\n        const howl = getHowlManager().getHowl()\n        if (howl === undefined) {\n            return\n        }\n\n        howl.fade(from, to, duration)\n    }, [])\n\n    const setRate = useCallback((speed: number) => {\n        const howl = getHowlManager().getHowl()\n        if (howl === undefined) {\n            return\n        }\n\n        howl.rate(speed)\n    }, [])\n\n    const setVolume = useCallback((vol: number) => {\n        const howl = getHowlManager().getHowl()\n        if (howl === undefined) {\n            return\n        }\n\n        howl.volume(vol)\n    }, [])\n\n    const mute = useCallback((muteOnOff: boolean) => {\n        const howl = getHowlManager().getHowl()\n        if (howl === undefined) {\n            return\n        }\n\n        howl.mute(muteOnOff)\n    }, [])\n\n    const loop = useCallback((loopOnOff: boolean) => {\n        const howl = getHowlManager().getHowl()\n        if (howl === undefined) {\n            return\n        }\n\n        // this differs from the implementation in useGlobalAudioPlayer which needs to broadcast the action to itself and all other instances of the hook\n        // maybe these two behaviors could be abstracted with one interface in the future\n        dispatch({ type: ActionTypes.ON_LOOP, howl, toggleValue: loopOnOff })\n    }, [])\n\n    const cleanup = useCallback(() => {\n        getHowlManager()?.destroyHowl()\n    }, [])\n\n    return {\n        ...state,\n        load,\n        seek,\n        getPosition,\n        play,\n        pause,\n        togglePlayPause,\n        stop,\n        mute,\n        fade,\n        setRate,\n        setVolume,\n        loop,\n        cleanup,\n        howlManager,\n        howlerGlobal\n    }\n}\n","import { useCallback, useEffect, useReducer, useRef } from \"react\"\nimport {\n    Action,\n    ActionTypes,\n    initStateFromHowl,\n    reducer as audioStateReducer\n} from \"./audioPlayerState\"\nimport { useHowlEventSync } from \"./useHowlEventSync\"\nimport { HowlInstanceManagerSingleton } from \"./HowlInstanceManager\"\nimport { AudioPlayer, LoadArguments } from \"./types\"\n\nexport function useGlobalAudioPlayer(): AudioPlayer {\n    const howlManager = useRef(HowlInstanceManagerSingleton.getInstance())\n\n    const [state, dispatch] = useHowlEventSync(\n        howlManager.current,\n        useReducer(\n            audioStateReducer,\n            howlManager.current.getHowl(),\n            initStateFromHowl\n        )\n    )\n\n    useEffect(() => {\n        const howlOnMount = howlManager.current.getHowl()\n        if (howlOnMount !== undefined) {\n            dispatch({ type: ActionTypes.START_LOAD, howl: howlOnMount })\n            if (howlOnMount.state() === \"loaded\") {\n                dispatch({ type: ActionTypes.ON_LOAD, howl: howlOnMount })\n            }\n        }\n\n        function sync(action: Action) {\n            dispatch(action)\n        }\n\n        const subscriptionId = howlManager.current.subscribe(sync)\n\n        return () => {\n            howlManager.current.unsubscribe(subscriptionId)\n        }\n    }, [])\n\n    const load = useCallback((...[src, options = {}]: LoadArguments) => {\n        // the HowlInstanceManager will intercept this newly created howl and broadcast it to registered hooks\n        howlManager.current.createHowl({\n            src,\n            ...options\n        })\n    }, [])\n\n    const seek = useCallback((seconds: number) => {\n        const howl = howlManager.current.getHowl()\n        if (howl === undefined) {\n            return\n        }\n\n        howl.seek(seconds)\n    }, [])\n\n    const getPosition = useCallback(() => {\n        const howl = howlManager.current.getHowl()\n        if (howl === undefined) {\n            return 0\n        }\n\n        return howl.seek() ?? 0\n    }, [])\n\n    const play = useCallback(() => {\n        const howl = howlManager.current.getHowl()\n        if (howl === undefined) {\n            return\n        }\n\n        howl.play()\n    }, [])\n\n    const pause = useCallback(() => {\n        const howl = howlManager.current.getHowl()\n        if (howl === undefined) {\n            return\n        }\n\n        howl.pause()\n    }, [])\n\n    const togglePlayPause = useCallback(() => {\n        const howl = howlManager.current.getHowl()\n        if (howl === undefined) {\n            return\n        }\n\n        if (state.playing) {\n            howl.pause()\n        } else {\n            howl.play()\n        }\n    }, [state])\n\n    const stop = useCallback(() => {\n        const howl = howlManager.current.getHowl()\n        if (howl === undefined) {\n            return\n        }\n\n        howl.stop()\n    }, [])\n\n    const fade = useCallback((from: number, to: number, duration: number) => {\n        const howl = howlManager.current.getHowl()\n        if (howl === undefined) {\n            return\n        }\n\n        howl.fade(from, to, duration)\n    }, [])\n\n    const setRate = useCallback((speed: number) => {\n        const howl = howlManager.current.getHowl()\n        if (howl === undefined) {\n            return\n        }\n\n        howl.rate(speed)\n    }, [])\n\n    const setVolume = useCallback((vol: number) => {\n        const howl = howlManager.current.getHowl()\n        if (howl === undefined) {\n            return\n        }\n\n        howl.volume(vol)\n    }, [])\n\n    const mute = useCallback((muteOnOff: boolean) => {\n        const howl = howlManager.current.getHowl()\n        if (howl === undefined) {\n            return\n        }\n\n        howl.mute(muteOnOff)\n    }, [])\n\n    const loop = useCallback((loopOnOff: boolean) => {\n        const howl = howlManager.current.getHowl()\n        if (howl === undefined) {\n            return\n        }\n\n        howlManager.current.broadcast({\n            type: ActionTypes.ON_LOOP,\n            howl,\n            toggleValue: loopOnOff\n        })\n    }, [])\n\n    return {\n        ...state,\n        load,\n        seek,\n        getPosition,\n        play,\n        pause,\n        togglePlayPause,\n        stop,\n        mute,\n        fade,\n        setRate,\n        setVolume,\n        loop\n    }\n}\n"],"names":["ActionTypes","initStateFromHowl","howl","undefined","src","isReady","isLoading","looping","duration","rate","volume","muted","playing","paused","stopped","error","position","seek","state","_src","loop","mute","reducer","action","type","START_LOAD","_extends","ON_LOAD","ON_ERROR","message","ON_PLAY","ON_PAUSE","ON_STOP","ON_END","ON_MUTE","_action$howl$mute","ON_RATE","_action$howl$rate","_action$howl","ON_VOLUME","_action$howl$volume","_action$howl2","ON_LOOP","_action$toggleValue","toggleValue","useHowlEventSync","howlManager","_ref","dispatch","onLoad","useCallback","getHowl","onError","_","errorCode","onPlay","onPause","onEnd","onStop","onMute","onVolume","onRate","useEffect","off","useRef","once","on","current","HowlInstanceManager","this","callbacks","Map","options","subscriptionIndex","_proto","prototype","subscribe","cb","id","toString","set","unsubscribe","subscriptionId","getHowler","Howler","getNumberOfConnections","size","createHowl","destroyHowl","_this$options","initialVolume","initialRate","initialMute","rest","_objectWithoutPropertiesLoose","_excluded","newHowl","Howl","forEach","_this$howl","_this$howl2","_this$howl3","_this$howl4","_this$howl5","onload","onend","onplay","onpause","onstop","_this$howl6","unload","broadcast","HowlInstanceManagerSingleton","getInstance","instance","howlerGlobal","getHowlManager","manager","_useHowlEventSync","useReducer","audioStateReducer","load","_ref$","seconds","getPosition","_howl$seek","play","pause","togglePlayPause","stop","fade","from","to","setRate","speed","setVolume","vol","muteOnOff","loopOnOff","cleanup","_getHowlManager","howlOnMount"],"mappings":"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"}